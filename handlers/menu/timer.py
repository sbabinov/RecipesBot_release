import os
import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputFile, InputMedia

from .functions_loader import get_user_theme_picture
from loader import dp, connection, cursor, bot, storage
from states import Timer


@dp.callback_query_handler(text='—Ç–∞–π–º–µ—Ä')
async def timer(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    image = get_user_theme_picture(user_id, 'timer')

    if_works = cursor.execute("SELECT if_works FROM timers_work WHERE user_id = ?", (user_id,)).fetchone()

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text="üü¢ –ó–∞–ø—É—Å–∫" if not if_works else "üî¥ –°—Ç–æ–ø",
                                                                 callback_data=
                                                                 '–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞' if not if_works else '—Å—Ç–æ–ø —Ç–∞–π–º–µ—Ä–∞'),
                                            InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞',
                                                                 callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–ø—Ä–æ—á–µ–µ'),
                                        ]
                                    ],
                                    )
    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    media = InputMedia(media=image)
    await bot.edit_message_media(media=media, chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞')
async def timer_settings(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üïì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                                 callback_data=f'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞'),
                                            InlineKeyboardButton(text='üî§ –ü–æ–º–µ—Ç–∫–∞',
                                                                 callback_data='–ø–æ–º–µ—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='—Ç–∞–π–º–µ—Ä'),
                                        ]
                                    ],
                                    )
    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞')
async def timer_time(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    await Timer.enter_amount_of_minutes.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–∞–π–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")


@dp.message_handler(state=Timer.enter_amount_of_minutes)
async def enter_amount_of_minutes(message: types.Message, state: FSMContext):
    answer = message.text
    user_id = message.from_user.id

    try:
        answer = int(answer)
        if answer < 1 or answer > 60:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 3 –¥–æ 60. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            user_timer_time = cursor.execute("SELECT timer_time FROM timers WHERE user_id = ?", (user_id,)).fetchone()
            if not user_timer_time:
                cursor.execute("INSERT INTO timers VALUES (?, ?, ?)", (user_id, answer, ''))
            else:
                cursor.execute("UPDATE timers SET timer_time = ? WHERE user_id = ?", (answer, user_id))
            connection.commit()

            if str(answer).endswith('1'):
                word = '–º–∏–Ω—É—Ç–∞'
            elif str(answer).endswith('2') or str(answer).endswith('3') or str(answer).endswith('4'):
                word = '–º–∏–Ω—É—Ç—ã'
            else:
                word = '–º–∏–Ω—É—Ç'

            ikb_menu = InlineKeyboardMarkup(row_width=1)
            ikb_menu.add(InlineKeyboardButton(text='‚úÖ –û–∫', callback_data='–û–ö'))

            await state.finish()
            await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞. –í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ - {answer} {word}.",
                                 reply_markup=ikb_menu)
            # await asyncio.sleep(answer * 60)
            # await message.answer("–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")


@dp.callback_query_handler(text='–ø–æ–º–µ—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞')
async def timer_note(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    await Timer.enter_note.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:")


@dp.message_handler(state=Timer.enter_note)
async def enter_note(message: types.Message, state: FSMContext):
    answer = message.text
    user_id = message.from_user.id

    user_timer_note = cursor.execute("SELECT timer_note FROM timers WHERE user_id = ?", (user_id,)).fetchone()
    if not user_timer_note:
        cursor.execute("INSERT INTO timers VALUES (?, ?, ?)", (user_id, 0, answer))
    else:
        cursor.execute("UPDATE timers SET timer_note = ? WHERE user_id = ?", (answer, user_id))
    connection.commit()

    ikb_menu = InlineKeyboardMarkup(row_width=1)
    ikb_menu.add(InlineKeyboardButton(text='‚úÖ –û–∫', callback_data='–û–ö'))

    await state.finish()
    await message.answer("–ü–æ–º–µ—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=ikb_menu)


@dp.callback_query_handler(text='–û–ö')
async def to_timer_menu(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    image = InputFile(os.path.join('images/design/timer.jpg'))

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üïì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                                 callback_data=f'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞'),
                                            InlineKeyboardButton(text='üî§ –ü–æ–º–µ—Ç–∫–∞',
                                                                 callback_data='–ø–æ–º–µ—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='—Ç–∞–π–º–µ—Ä'),
                                        ]
                                    ],
                                    )
    chat_id = call.message.chat.id

    await bot.send_photo(chat_id=chat_id, photo=image, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞')
async def start_timer(call: CallbackQuery):
    # await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    t_time = cursor.execute("SELECT timer_time FROM timers WHERE user_id = ?", (user_id,)).fetchone()
    t_note = cursor.execute("SELECT timer_note FROM timers WHERE user_id = ?", (user_id,)).fetchone()

    if not t_time or t_time[0] == 0:
        await bot.answer_callback_query(str(call.id), text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
                                        show_alert=True)
    elif not t_note or not t_note[0]:
        await bot.answer_callback_query(str(call.id), text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
                                        show_alert=True)
    else:
        t_time = t_time[0]
        t_note = f'<b>–¢–∞–π–º–µ—Ä</b>\n\n' \
                 f'{t_note[0]}'

        timers_ids = cursor.execute("SELECT timer_id FROM timers_work").fetchall()
        if not timers_ids:
            timer_id = 0
        else:
            timer_id = timers_ids[-1][0] + 1

        cursor.execute("INSERT INTO timers_work VALUES (?, ?, ?)", (timer_id, 1, user_id))
        connection.commit()

        ikb_menu = InlineKeyboardMarkup(row_width=1,
                                        inline_keyboard=[
                                            [
                                                InlineKeyboardButton(text='üî¥ –°—Ç–æ–ø',
                                                                     callback_data=f'—Å—Ç–æ–ø —Ç–∞–π–º–µ—Ä–∞_{timer_id}'),
                                                InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞',
                                                                     callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞'),
                                            ],
                                            [
                                                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–ø—Ä–æ—á–µ–µ'),
                                            ]
                                        ],
                                        )
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=ikb_menu)
        await asyncio.sleep(t_time * 60)

        if_works = cursor.execute("SELECT if_works FROM timers_work WHERE timer_id = ?", (timer_id,)).fetchone()
        if if_works and if_works[0]:
            for i in 0, 1, 2:
                await call.message.answer(t_note)
                await asyncio.sleep(5)

        cursor.execute("DELETE FROM timers_work WHERE timer_id = ?", (timer_id,))
        connection.commit()


@dp.callback_query_handler(text_contains='—Å—Ç–æ–ø —Ç–∞–π–º–µ—Ä–∞')
async def stop_timer(call: CallbackQuery):
    user_id = call.from_user.id
    timer_id = int(call.data.split('_')[1])

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üü¢ –ó–∞–ø—É—Å–∫',
                                                                 callback_data=f'–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞'),
                                            InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞',
                                                                 callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–ø—Ä–æ—á–µ–µ'),
                                        ]
                                    ],
                                    )

    if_works = cursor.execute("SELECT if_works FROM timers_work WHERE timer_id = ?", (timer_id,)).fetchone()

    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if not if_works:
        await bot.answer_callback_query(str(call.id), text='–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤', show_alert=True)
    else:
        cursor.execute("UPDATE timers_work SET if_works = ? WHERE timer_id = ?", (0, timer_id))
        connection.commit()

    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=ikb_menu)



