import os
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputFile

from loader import dp, connection, cursor, bot
from states import Search
from handlers.menu.menu import get_recipe
from .achievements import give_achievements
from .functions_loader import get_ids, get_user_theme_picture
from ..users.experience import give_experience


def check_vip(user_id: int) -> int:
    user_vip_time = cursor.execute("SELECT VIP FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
    now_time = int(time.time())

    if now_time >= user_vip_time:
        return 0
    return user_vip_time - now_time


def get_profile(user_id: int) -> str:
    data = cursor.execute("SELECT * FROM profiles WHERE id = ?", (user_id,)).fetchone()

    user_id, username, gender, emoji, favorites, recipes, subscriptions, subscribers, likes, create_date, exp, vip, \
        get_vip_date, filters, achievements, articles = data

    lvl = 0
    progress = exp * 100 // 10
    rank = '–ù–æ–≤–∏—á–æ–∫'

    if exp >= 10:
        lvl = 1
        progress = exp * 100 // 20
        rank = '–°—Ç–∞–∂–µ—Ä'
    if exp >= 20:
        lvl = 2
        progress = exp * 100 // 40
        rank = '–î–æ—Å—Ç–∞–≤—â–∏–∫'
    if exp >= 40:
        lvl = 3
        progress = exp * 100 // 60
        rank = '–û—Ñ–∏—Ü–∏–∞–Ω—Ç'
    if exp >= 60:
        lvl = 4
        progress = exp * 100 // 90
        rank = '–ú–æ–π—â–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
    if exp >= 90:
        lvl = 5
        progress = exp * 100 // 120
        rank = '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã—Ö –¥–µ–ª –º–∞—Å—Ç–µ—Ä'
    if exp >= 120:
        lvl = 6
        progress = exp * 100 // 160
        rank = '–ö–æ–Ω–¥–∏—Ç–µ—Ä'
    if exp >= 160:
        lvl = 7
        progress = exp * 100 // 200
        rank = '–ü–æ–≤–∞—Ä'
    if exp >= 200:
        lvl = 8
        progress = exp * 100 // 250
        rank = '–ü–æ–º–æ—â–Ω–∏–∫ —à–µ—Ñ–∞'
    if exp >= 250:
        lvl = 9
        progress = exp * 100 // 300
        rank = '–®–µ—Ñ-–ø–æ–≤–∞—Ä'
    if exp >= 300:
        lvl = 10
        progress = exp * 100 // 350
        rank = '–ü–æ–≤–∞—Ä –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω –∏ –Ω–∞—Ä–æ–¥–æ–≤'

    if exp >= 350:
        lvl = (exp // 50) + 4
        progress = (lvl - 4) * 50

    user_recipes = recipes.split()
    amount_likes = 0
    for r in user_recipes:
        likes = cursor.execute("SELECT likes FROM feedback WHERE rec_id = ?", (int(r),)).fetchone()[0]
        amount_likes += len(likes.split())

    bar = ''

    if progress > 12:
        bar += 'üü©'
    if progress > 24:
        bar += 'üü©'
    if progress > 37:
        bar += 'üü©'
    if progress > 49:
        bar += 'üü©'
    if progress > 62:
        bar += 'üü©'
    if progress > 74:
        bar += 'üü©'
    if progress > 87:
        bar += 'üü©'

    bar += f'{"‚¨úÔ∏è" * (8 - len(bar))}'

    profile = f"{emoji} <b>{username}</b> {emoji}\n\n" \
              f"    {'üëë VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if check_vip(user_id) else ''}\n" \
              f"<b>{lvl} {bar} {lvl + 1}</b>\n" \
              f"<i>{rank} ({lvl} –ª–≤–ª)</i>\n" \
              f"--------------------------------------------\n" \
              f"üìö –ù–∞–ø–∏—Å–∞–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes.split())}\n" \
              f"--------------------------------------------\n" \
              f"üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {len(subscribers.split())}\n" \
              f"--------------------------------------------\n" \
              f"‚ù§Ô∏è –õ–∞–π–∫–∏: {amount_likes}\n" \
              f"--------------------------------------------\n" \
              f"üïì –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {create_date}\n" \
              f"--------------------------------------------\n"

    return profile


@dp.callback_query_handler(text='–ø–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞')
async def search_author(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )
    await Search.enter_author.set()
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —á–∞—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞ –∞–≤—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):", reply_markup=ikb_menu)


@dp.message_handler(state=Search.enter_author)
async def start_search_author(message: types.Message, state: FSMContext):
    answer = message.text

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                                                 callback_data='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞')
                                        ]
                                    ],
                                    )
    if len(answer) < 3:
        await message.answer("–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞!", reply_markup=ikb_menu)
    else:
        user_username = cursor.execute("SELECT name FROM profiles WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        authors_usernames = cursor.execute("SELECT name FROM profiles").fetchall()
        authors = []
        for u in authors_usernames:
            if answer.lower() in u[0].lower():
                recipes = cursor.execute("SELECT recipes FROM profiles WHERE name = ?", (u[0],)).fetchone()[0]
                if recipes and user_username != u[0]:
                    authors.append(u[0])

        if not authors:
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                [
                                                    InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                         callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                                ]
                                            ],
                                            )
            await message.answer("‚õîÔ∏è –ù–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º", reply_markup=ikb_menu)
        else:
            a = ''
            for author in authors:
                emoji = cursor.execute("SELECT emoji FROM profiles WHERE name = ?", (author,)).fetchone()[0]
                a += f"{emoji} <code>{author}</code>\n"
            message_text = f"<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã:</b>\n\n" \
                           f"{a}"
            await message.answer(message_text)
            await message.answer("<i>–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º:</i>",
                                 reply_markup=ikb_menu)
            await Search.enter_author_username.set()


@dp.message_handler(state=Search.enter_author_username)
async def to_author_profile(message: types.Message, state: FSMContext):
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                                                 callback_data='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞')
                                        ]
                                    ],
                                    )
    answer = message.text
    author_id = cursor.execute("SELECT id FROM profiles WHERE name = ?", (answer,)).fetchone()
    if not author_id:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:", reply_markup=ikb_menu)
    else:
        await state.finish()
        user_id = message.from_user.id
        user_subscriptions = cursor.execute("SELECT subscriptions FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
        user_subscriptions = user_subscriptions.split()

        if str(author_id[0]) in user_subscriptions:
            if_sub = 1
        else:
            if_sub = 0
        ikb_menu = InlineKeyboardMarkup(row_width=1,
                                        inline_keyboard=[
                                            [
                                                InlineKeyboardButton(
                                                    text=f'{"üî¥ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if if_sub else "üü¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}',
                                                    callback_data=f'–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è_{author_id[0]}_{0}_{1}___1'),
                                                InlineKeyboardButton(text='üìö –†–µ—Ü–µ–ø—Ç—ã',
                                                                     callback_data=f'—Ä–µ—Ü–µ–ø—Ç—ã –∞–≤—Ç–æ—Ä–∞_'
                                                                                   f'{author_id[0]}_1_0__1')
                                            ],
                                            [
                                                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                                                     callback_data='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞')
                                            ]
                                        ])
        profile = get_profile(author_id[0])
        await Search.author_profile.set()
        await message.answer(profile, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞', state=Search.enter_author_username)
async def back_from_search_author(call: CallbackQuery, state: FSMContext):
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )
    await call.message.delete()
    await Search.enter_author.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∞–≤—Ç–æ—Ä–∞ (—á–∞—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞):", reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞', state=Search.enter_author)
async def back_from_search_author(call: CallbackQuery, state: FSMContext):
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )
    await call.message.delete()
    await Search.enter_author.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∞–≤—Ç–æ—Ä–∞ (—á–∞—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞):", reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞', state=Search.author_profile)
async def back_from_search_author(call: CallbackQuery):
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )
    await call.message.delete()
    await Search.enter_author.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∞–≤—Ç–æ—Ä–∞ (—á–∞—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞):", reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞', state=Search.author_profile)
async def back_to_author_profile(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    author_id = int(call.data.split('_')[1])
    user_subscriptions = cursor.execute("SELECT subscriptions FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
    user_subscriptions = user_subscriptions.split()

    if str(author_id) in user_subscriptions:
        if_sub = 1
    else:
        if_sub = 0
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(
                                                text=f'{"üî¥ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if if_sub else "üü¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}',
                                                callback_data=f'–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è_{author_id}_{0}_{1}___1'),
                                            InlineKeyboardButton(text='üìö –†–µ—Ü–µ–ø—Ç—ã',
                                                                 callback_data=f'—Ä–µ—Ü–µ–ø—Ç—ã –∞–≤—Ç–æ—Ä–∞_'
                                                                               f'{author_id}_1_0__1')
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                                                 callback_data='–ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞')
                                        ]
                                    ])
    profile = get_profile(author_id)
    await Search.author_profile.set()
    await call.message.delete()
    await call.message.answer(profile, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ª–∞–π–∫', state=Search.author_profile)
async def like(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    rec_id = call.data.split('_')[2]
    ind = ids.index(rec_id)
    from_subs = call.data.split('_')[3]

    if call.data.split('_')[4] != '0' and call.data.split('_')[4]:
        save_back = f'_{call.data.split("_")[4]}_{call.data.split("_")[5]}'
    else:
        save_back = '_0'
    print(f'SAVE BACK: {save_back}')

    author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (int(rec_id),)).fetchone()[0]
    if int(author_id) == call.from_user.id:
        await call.answer("–ù–µ–ª—å–∑—è –ª–∞–π–∫–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã!")
    else:

        user_id = call.from_user.id

        likes = cursor.execute("SELECT likes FROM feedback WHERE rec_id = ?", (rec_id,)).fetchone()[0]
        user_likes = cursor.execute("SELECT likes FROM profiles WHERE id = ?", (user_id,)).fetchone()[0].split()
        if not likes:
            likes = []
            count_likes = 0
        else:
            likes = likes.split(' ')
            count_likes = len(likes)

        if str(user_id) in likes:
            likes.remove(str(user_id))
            user_likes.remove(rec_id)
            new_likes = ' '.join(likes)
            user_likes = ' '.join(user_likes)
            count_likes -= 1
        else:
            likes.append(str(user_id))
            user_likes.append(rec_id)
            if len(user_likes) >= 40:
                await give_achievements(user_id, 'üòç')
            give_experience(user_id, 1, rec_id=int(rec_id), for_like=True)
            new_likes = ' '.join(likes)
            user_likes = ' '.join(user_likes)
            count_likes += 1

        cursor.execute("UPDATE feedback SET likes = ? WHERE rec_id = ?", (new_likes, rec_id))
        cursor.execute("UPDATE profiles SET likes = ? WHERE id = ?", (user_likes, user_id))
        connection.commit()

        favorites: str = cursor.execute("SELECT favorites FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
        favorites: list = favorites.split(' ')

        if_favorite = 'üíæ‚úÖ' if str(rec_id) in favorites else 'üíæ'

        like_color = '‚ù§Ô∏è' if str(call.from_user.id) in likes else 'ü§ç'
        first_raw = [
            InlineKeyboardButton(text=f'{like_color} {count_likes if count_likes else ""}',
                                 callback_data=f'–ª–∞–π–∫_{ids_id}_{rec_id}_{from_subs}{save_back}'),
            InlineKeyboardButton(text=f'{if_favorite}',
                                 callback_data=f'–∏–∑–±—Ä–∞–Ω–Ω–æ–µ_{ids_id}_{rec_id}_{from_subs}{save_back}'),
        ]

        author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
        second_raw = []

        if author_id:
            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–∫ –∞–≤—Ç–æ—Ä—É_{author_id}_'
                                                             f'{f"{ids_id}_{rec_id}" if save_back == "_0" else save_back[1:]}_{from_subs}')]
        if len(ids) > 1:
            first_raw += [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'–≤–ª–µ–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}{save_back}'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'–≤–ø—Ä–∞–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}{save_back}'),
            ]
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        else:
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        chat_id = call.message.chat.id
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', state=Search.author_profile)
async def user_favorite(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))
    user_id = call.from_user.id
    favorites: str = cursor.execute("SELECT favorites FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
    rec_id = call.data.split('_')[2]

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    edit_message = call.message.message_id
    ind = ids.index(rec_id)
    from_subs = call.data.split('_')[3]

    author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (int(rec_id),)).fetchone()[0]
    if int(author_id) == call.from_user.id:
        await call.answer("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã!")
    else:
        users_favorites: str = cursor.execute("SELECT favorites FROM feedback WHERE rec_id = ?", (rec_id,)).fetchone()[0]
        users_favorites: list = users_favorites.split()

        favorites: list = favorites.split(' ')
        if str(rec_id) not in favorites:
            favorites.append(str(rec_id))
            users_favorites.append(str(user_id))
            give_experience(user_id, 3, rec_id=int(rec_id), for_favor=True)
            await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            favorites.remove(str(rec_id))
            users_favorites.remove(str(user_id))
            await call.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

        users_favorites = ' '.join(users_favorites)

        likes = cursor.execute("SELECT likes FROM feedback WHERE rec_id = ?", (rec_id,)).fetchone()[0]
        likes = likes.split()
        count_likes = len(likes)

        if_favorite = 'üíæ‚úÖ' if str(rec_id) in favorites else 'üíæ'
        like_color = '‚ù§Ô∏è' if str(call.from_user.id) in likes else 'ü§ç'
        first_raw = [
            InlineKeyboardButton(text=f'{like_color} {count_likes if count_likes else ""}',
                                 callback_data=f'–ª–∞–π–∫_{ids_id}_{rec_id}_{from_subs}'),
            InlineKeyboardButton(text=f'{if_favorite}',
                                 callback_data=f'–∏–∑–±—Ä–∞–Ω–Ω–æ–µ_{ids_id}_{rec_id}_{from_subs}'),
        ]

        author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
        second_raw = []
        if author_id:
            str_ids = ' '.join(ids)
            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞_{author_id}')]
        if len(ids) > 1:
            first_raw += [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'–≤–ª–µ–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'–≤–ø—Ä–∞–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}'),
            ]
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        else:
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        chat_id = call.message.chat.id
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=edit_message, reply_markup=ikb_menu)
        # await bot.answer_callback_query(str(call.id))

        favorites = ' '.join(favorites)

        cursor.execute("UPDATE profiles SET favorites = ? WHERE id = ?", (favorites, user_id))
        cursor.execute("UPDATE feedback SET favorites = ? WHERE rec_id = ?", (users_favorites, rec_id))
        connection.commit()


@dp.callback_query_handler(text_contains='–≤–ø—Ä–∞–≤–æ', state=Search.author_profile)
async def next_recipe(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    now_id = call.data.split('_')[2]
    from_subs = int(call.data.split('_')[3])
    from_profile = bool(int(call.data.split('_')[4]))

    author = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (now_id,)).fetchone()[0]

    await get_recipe(call, ids, now_id, change=True, call=True, next_rec=True,
                     msg_to_edit=call.message, from_subs=from_subs, from_profile=from_profile,
                     from_author_search=author)


@dp.callback_query_handler(text_contains='–≤–ª–µ–≤–æ', state=Search.author_profile)
async def previous_recipe(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    now_id = call.data.split('_')[2]
    from_subs = int(call.data.split('_')[3])
    from_profile = int(call.data.split('_')[4])

    author = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (now_id,)).fetchone()[0]

    await get_recipe(call, ids, now_id, change=True, call=True, next_rec=False,
                     msg_to_edit=call.message, from_subs=from_subs, from_profile=from_profile,
                     from_author_search=author)


@dp.callback_query_handler(text_contains='–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç', state=Search.author_profile)
async def show_recipe(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç')
                                        ]
                                    ],
                                    )

    rec_id = int(call.data.split('_')[1])
    description: str = cursor.execute("SELECT description FROM recipes WHERE id = ?", (rec_id,)).fetchone()[0]
    text = f"<b><i>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</i></b>\n" \
           f"{description}"
    await call.message.answer(text, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ó–∞–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç', state=Search.author_profile)
async def close_recipe(call: CallbackQuery):
    await call.message.delete()


@dp.message_handler(state=Search.author_profile)
async def exit_from_state(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text == '/menu':
        await state.finish()

        image = get_user_theme_picture(user_id, 'quizzes')
        ikb_menu = InlineKeyboardMarkup(row_width=1,
                                        inline_keyboard=[
                                            [
                                                InlineKeyboardButton(text='üìö –†–µ—Ü–µ–ø—Ç—ã', callback_data=f'–û–µ—Ü–µ–ø—Ç—ã'),
                                                InlineKeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),

                                            ],
                                            [
                                                InlineKeyboardButton(text='‚ùáÔ∏è –ü—Ä–æ—á–µ–µ', callback_data='–ø—Ä–æ—á–µ–µ'),
                                                InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
                                            ],


                                        ],
                                        )
        chat_id = message.chat.id
        await bot.send_photo(chat_id, photo=image, reply_markup=ikb_menu)
    if message.text == '/help':
        await state.finish()

        image = get_user_theme_picture(user_id, 'quizzes')

        ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [
                InlineKeyboardButton(text='‚ùì –í–æ–ø—Ä–æ—Å', callback_data='—Ä–µ–ø–æ—Ä—Ç_–≤–æ–ø—Ä–æ—Å'),
                InlineKeyboardButton(text='‚úèÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='—Ä–µ–ø–æ—Ä—Ç_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'),
            ],
            [
                InlineKeyboardButton(text='üîä –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –±–æ—Ç–∞', callback_data='—Ä–µ–ø–æ—Ä—Ç_–ø—Ä–æ–±–ª–µ–º–∞'),
            ]
        ])

        chat_id = message.chat.id

        await bot.send_photo(chat_id=chat_id, photo=image, reply_markup=ikb_menu)


