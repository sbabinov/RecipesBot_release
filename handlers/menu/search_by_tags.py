from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
import os

from handlers.menu.settings import filter_recipes
from loader import dp, cursor, bot
from states import Search
from handlers.menu.menu import get_recipe
from .functions_loader import get_user_theme_picture


tags = [
    '–±—ã—Å—Ç—Ä–æ–µ',
    '–ø–æ–ª–µ–∑–Ω–æ–µ',
    '—Å–ª–∞–¥–∫–æ–µ',
    '–¥–ª—è –∂–∞—Ä—ã',
    '–±–µ–∑ –¥—É—Ö–æ–≤–∫–∏',
    '–¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏',
    '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ',
    '–ø–æ—Å—Ç–Ω–æ–µ',
    '–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ',
    '–Ω–æ–≤—ã–π –≥–æ–¥',
    '–æ—Å—Ç—Ä–æ–µ'
]


async def exit_from_tags(call, state=None):
    user_id = call.from_user.id

    image = get_user_theme_picture(user_id, 'search')

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üî§ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
                                                                 callback_data=f'–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'),
                                            InlineKeyboardButton(text='üìù –ü–æ —Ç–µ–≥–∞–º', callback_data='–ø–æ —Ç–µ–≥–∞–º'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='üå∂ –ü–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º',
                                                                 callback_data='–ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º'),
                                            InlineKeyboardButton(text='üë§ –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞', callback_data='–ø–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–Ω–∞–∑–∞–¥'),
                                        ]
                                    ],
                                    )
    if state:
        await state.finish()
    await call.message.delete()
    await bot.send_photo(chat_id=call.message.chat.id, photo=image, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ø–æ —Ç–µ–≥–∞–º')
async def search_by_tags(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    global tags
    t = ''
    n = 1
    for tag in tags:
        t += f'{n}. <code>{tag}</code>\n'
        n += 1
    message = f"#Ô∏è‚É£ <b>–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:</b>\n\n" \
              f"{t}"

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )
    await call.message.delete()
    await call.message.answer(message)
    await call.message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:</i>', reply_markup=ikb_menu)
    await Search.enter_tags.set()


@dp.message_handler(state=Search.enter_tags)
async def start_search_by_tags(message: types.Message, state: FSMContext):
    global tags
    answer = message.text
    user_id = message.from_user.id

    data = await state.get_data()
    t = data.get('enter_tags')

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )
    if answer not in tags:
        await message.answer("<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞!</i>", reply_markup=ikb_menu)
    elif t and answer in t:
        await message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–∫–æ–π —Ç–µ–≥!", reply_markup=ikb_menu)
    else:
        if not t:
            await state.update_data(enter_tags=[answer])
        else:
            await state.update_data(enter_tags=t + [answer])

        data = await state.get_data()
        t = data.get('enter_tags')

        if t and len(t) == 3:
            await state.finish()

            recipes = []
            d = cursor.execute("SELECT tags, id FROM recipes").fetchall()
            for rec_tag in d:
                add = True
                for tag in t:
                    if tag not in rec_tag[0]:
                        add = False
                if add:
                    recipes.append(rec_tag[1])

            recipes = list(set(recipes))
            await state.finish()
            if not recipes:
                ikb_menu = InlineKeyboardMarkup(row_width=1,
                                                inline_keyboard=[
                                                    [
                                                        InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                                                             callback_data='–ù–∞–∑–∞–î –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º'),
                                                        InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                             callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                                    ],

                                                ],
                                                )
                await message.answer("‚õîÔ∏è –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏", reply_markup=ikb_menu)
            else:
                filters = cursor.execute("SELECT filters FROM profiles WHERE id = ?", (user_id,)).fetchone()[0].split()

                recipes = filter_recipes(recipes, filters[0], filter_type=int(filters[1]))
                await get_recipe(message, recipes, recipes[0])
        else:

            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                [
                                                    InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å',
                                                                         callback_data='–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏'),
                                                    InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                         callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                                ],

                                            ],
                                            )

            await message.answer(f"–¢–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ–≥–æ–≤, "
                                 f"–≤–≤–æ–¥–∏—Ç–µ –∏—Ö –¥–∞–ª—å—à–µ (–º–∞–∫—Å–∏–º—É–º —Ç–µ–≥–æ–≤ - 3)\n\n"
                                 f"–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏: <i>{', '.join(t)}</i>",
                                 reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏', state=Search.enter_tags)
async def apply_tags(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    data = await state.get_data()
    t = data.get('enter_tags')
    recipes = []

    d = cursor.execute("SELECT tags, id FROM recipes").fetchall()
    for rec_tag in d:
        add = True
        for tag in t:
            if tag not in rec_tag[0]:
                add = False
        if add:
            recipes.append(rec_tag[1])

    recipes = list(set(recipes))
    print(list(set(recipes)))
    await state.finish()
    if not recipes:
        ikb_menu = InlineKeyboardMarkup(row_width=1,
                                        inline_keyboard=[
                                            [
                                                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                                                     callback_data='–ù–∞–∑–∞–î –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º'),
                                                InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                     callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                            ],

                                        ],
                                        )
        await call.message.answer("‚õîÔ∏è –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏", reply_markup=ikb_menu)
    else:
        filters = cursor.execute("SELECT filters FROM profiles WHERE id = ?", (user_id,)).fetchone()[0].split()

        recipes = filter_recipes(recipes, filters[0], filter_type=int(filters[1]))
        await get_recipe(call, recipes, recipes[0], call=True)


@dp.callback_query_handler(text='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º', state=Search.enter_author)
async def exit_from_search_by_tags(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id))
    await exit_from_tags(call, state=state)


@dp.callback_query_handler(text='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º', state=Search.enter_tags)
async def exit_from_search_by_tags(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id))
    await exit_from_tags(call, state=state)


@dp.callback_query_handler(text='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º', state=Search.enter_ingredients)
async def exit_from_search_by_tags(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id))
    await exit_from_tags(call, state=state)


@dp.callback_query_handler(text='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
async def exit_from_search_by_tags(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))
    await exit_from_tags(call)


@dp.callback_query_handler(text='–ù–∞–∑–∞–î –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
async def back_from_search_by_tags(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    global tags
    t = ''
    n = 1
    for tag in tags:
        t += f'{n}. <code>{tag}</code>\n'
        n += 1
    message = f"#Ô∏è‚É£ <b>–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:</b>\n\n" \
              f"{t}"

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –í—ã—Ö–æ–¥',
                                                                 callback_data='–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º')
                                        ]
                                    ],
                                    )

    await call.message.answer(message)
    await call.message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:</i>', reply_markup=ikb_menu)
    await Search.enter_tags.set()







