import os.path

from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, CallbackQuery, InputFile, InputMedia

from loader import dp, connection, cursor, bot
from aiogram.dispatcher.filters import Command
from aiogram import types
from states import Search
from .settings import filter_recipes
from .achievements import give_achievements
from ..users.experience import give_experience
from .functions_loader import get_ids, create_ids_entry, get_user_theme_picture

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


@dp.message_handler(Command('menu'))
async def show_menu(message: types.Message):
    user_id = message.from_user.id

    if_exists = cursor.execute("SELECT name FROM profiles WHERE id = ?", (user_id,)).fetchone()
    if not if_exists:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n"
                             "/start")

    image = get_user_theme_picture(user_id, 'main_menu')

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üìö –†–µ—Ü–µ–ø—Ç—ã', callback_data=f'–û–µ—Ü–µ–ø—Ç—ã'),
                                            InlineKeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),

                                        ],
                                        [
                                            # InlineKeyboardButton(text='‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ', callback_data='–∑–¥–æ—Ä–æ–≤—å–µ'),
                                            InlineKeyboardButton(text='‚ùáÔ∏è –ü—Ä–æ—á–µ–µ', callback_data='–ø—Ä–æ—á–µ–µ'),
                                            InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
                                        ],
                                        # [
                                        #     InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
                                        # ]
                                    ],
                                    )
    chat_id = message.chat.id
    await bot.send_photo(chat_id, photo=image, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–û–µ—Ü–µ–ø—Ç—ã')
async def recipes(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    image = get_user_theme_picture(user_id, 'recipes')
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫', callback_data=f'–ø–æ–∏—Å–∫'),
                                            # InlineKeyboardButton(text='üìú –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                                            InlineKeyboardButton(text='üèÖ –¢–æ–ø', callback_data='—Ç–æ–ø'),
                                        ],
                                        [
                                            InlineKeyboardButton(text='üìï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                 callback_data='–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'),
                                            InlineKeyboardButton(text='üíæ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data='–≤—Å–µ fav')
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–Ω–∞–∑–∞–¥'),
                                        ]
                                    ],
                                    )
    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    media = InputMedia(media=image)
    await bot.edit_message_media(media=media, chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–Ω–∞–∑–∞–¥')
async def back(call: CallbackQuery):
    user_id = call.from_user.id

    image = get_user_theme_picture(user_id, 'main_menu')

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üìö –†–µ—Ü–µ–ø—Ç—ã', callback_data=f'–û–µ—Ü–µ–ø—Ç—ã'),
                                            InlineKeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),

                                        ],
                                        [
                                            InlineKeyboardButton(text='‚ùáÔ∏è –ü—Ä–æ—á–µ–µ', callback_data='–ø—Ä–æ—á–µ–µ'),
                                            InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
                                        ],
                                    ]
                                    )
    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    media = InputMedia(media=image)
    await bot.edit_message_media(media=media, chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
async def back(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))
    await call.message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –±–ª—é–¥–∞ (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è):</i>')
    await Search.enter_title.set()


async def get_recipe(message, ids: list, now_id: str, change: bool = False, call: bool = False, next_rec: bool = None,
                     msg_to_edit=None, from_profile: bool = False, from_subs: int = 0, save_back: list = None,
                     from_author_search: int = 0):
    user_id: int = message.from_user.id

    str_ids = ' '.join([str(i) for i in ids])
    if not cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)", (str_ids, 'recipes')).fetchone():
        ids_id = create_ids_entry(ids, 'recipes')
    else:
        ids_id = cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)",
                                (str_ids, 'recipes')).fetchone()[0]

    if next_rec is not None:
        if next_rec:
            try:
                now_id = ids[ids.index(now_id) + 1]
            except IndexError:
                now_id = ids[0]
        else:
            try:
                now_id = ids[ids.index(now_id) - 1]
            except IndexError:
                now_id = ids[-1]

    ind = ids.index(now_id)

    title = cursor.execute("SELECT title FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
    type_ = cursor.execute("SELECT type FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
    ingredients = cursor.execute("SELECT ingredients FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
    description = cursor.execute("SELECT description FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
    author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]

    likes = cursor.execute("SELECT likes FROM feedback WHERE rec_id = ?", (ids[ind],)).fetchone()[0]
    if not likes:
        count_likes = 0
    else:
        likes = likes.split(' ')
        count_likes = len(likes)

    like_color = '‚ù§Ô∏è' if str(message.from_user.id) in likes else 'ü§ç'

    favorites: str = cursor.execute("SELECT favorites FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
    favorites: list = favorites.split(' ')

    if_favorite = 'üíæ‚úÖ' if str(now_id) in favorites else 'üíæ'

    first_raw = [
        InlineKeyboardButton(text=f'{like_color} {count_likes if count_likes else ""}',
                             callback_data=f'–ª–∞–π–∫_{ids_id}_{now_id}_{from_subs}'
                                           f'_{f"{save_back[0]}_{save_back[1]}" if save_back else "0"}'),
        InlineKeyboardButton(text=f'{if_favorite}',
                             callback_data=f'–∏–∑–±—Ä–∞–Ω–Ω–æ–µ_{ids_id}_{now_id}_{from_subs}'
                                           f'_{f"{save_back[0]}_{save_back[1]}" if save_back else "0"}')
    ]
    second_raw = []

    if author_id and not from_profile and author_id != user_id:
        if from_author_search:
            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞_{from_author_search}')]
        elif not save_back:
            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–∫ –∞–≤—Ç–æ—Ä—É_{author_id}_{ids_id}_{now_id}_{from_subs}')]
        else:
            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–∫ –∞–≤—Ç–æ—Ä—É_{author_id}_{save_back[0]}_{save_back[1]}_'
                                                             f'{from_subs}')]
    if from_profile:
        amount_favorites = cursor.execute("SELECT favorites FROM feedback WHERE rec_id = ?", (now_id,)).fetchone()[0]
        amount_favorites = len(amount_favorites.split())
        second_raw = [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–Ω–∞–∑–∞–¥ –∏–∑ –º–æ–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤')]
        first_raw = [
            InlineKeyboardButton(text=f'{like_color} {count_likes if count_likes else ""}',
                                 callback_data=f'–ª–∞–π–∫_{ids_id}_{now_id}_{from_subs}'
                                               f'_{f"{save_back[0]}_{save_back[1]}" if save_back else "0"}'),
            InlineKeyboardButton(text=f'{if_favorite} {amount_favorites if amount_favorites else ""}',
                                 callback_data=f'–∏–∑–±—Ä–∞–Ω–Ω–æ–µ_{ids_id}_{now_id}_{from_subs}'
                                               f'_{f"{save_back[0]}_{save_back[1]}" if save_back else "0"}')
        ]
    from_profile = 1 if from_profile else 0
    if len(ids) > 1:
        if save_back:
            callback_data = \
                f'–≤–ª–µ–≤–æ_{ids_id}_{now_id}_{from_subs}_{from_profile}_{save_back[0]}_{save_back[1]}'
            callback_data_2 = \
                f'–≤–ø—Ä–∞–≤–æ_{ids_id}_{now_id}_{from_subs}_{from_profile}_{save_back[0]}_{save_back[1]}'
        else:
            callback_data = f'–≤–ª–µ–≤–æ_{ids_id}_{now_id}_{from_subs}_{from_profile}_0'
            callback_data_2 = f'–≤–ø—Ä–∞–≤–æ_{ids_id}_{now_id}_{from_subs}_{from_profile}_0'
        first_raw += [
                InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                     callback_data=callback_data),
                InlineKeyboardButton(text='‚û°Ô∏è',
                                     callback_data=callback_data_2),
        ]

        ikb_menu = InlineKeyboardMarkup(row_width=1,
                                        inline_keyboard=[

                                            first_raw,
                                            [
                                                InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                     callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{now_id}')
                                            ],
                                            second_raw,

                                        ],
                                        )
    else:
        ikb_menu = InlineKeyboardMarkup(row_width=1,
                                        inline_keyboard=[
                                            first_raw,
                                            [
                                                InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                     callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{now_id}')
                                            ],
                                            second_raw,

                                        ],
                                        )
    date_ = cursor.execute("SELECT date FROM recipes WHERE id = ?", (now_id,)).fetchone()[0]
    date = f'  |  {date_}'
    if author_id == user_id:
        author = '|  <i>–≠—Ç–æ –≤–∞—à —Ä–µ—Ü–µ–ø—Ç!</i>'
    elif author_id:
        author = cursor.execute("SELECT name FROM profiles WHERE id = ?", (author_id,)).fetchone()[0]
        author = f'|  <i>–ê–≤—Ç–æ—Ä: <code>{author}</code></i>'
    else:
        author = ''
        date = f'|  {date_}'
    rec_number = ids.index(now_id) + 1

    text_ingredients = ''
    for i in ingredients.split(', '):
        if i.startswith('*'):
            text_ingredients += f"\n<i>{i[1:].capitalize()}:</i>\n"
        else:
            text_ingredients += f"- {i.lower()}\n"

    recipe = f"<b>{title}</b> (<i>{type_.lower()}</i>)\n\n" \
             f"<i><b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b></i>\n" \
             f"{text_ingredients}\n" \
             f"{rec_number} / {len(ids)}  {author}{date}\n" \

    if not call:
        chat_id = message.chat.id
    else:
        chat_id = message.message.chat.id

    if not change:
        path = os.path.join('images/recipes/' + str(ids[ind]) + '.jpg')
        await bot.send_photo(photo=types.InputFile(path), caption=recipe, chat_id=chat_id,
                             reply_markup=ikb_menu)
    else:
        print(ids, ind)
        path = os.path.join('images/recipes/' + str(ids[ind]) + '.jpg')
        edit_message_id = msg_to_edit.message_id
        photo = types.InputMedia(media=types.InputFile(path), caption=recipe)
        await bot.edit_message_media(media=photo, chat_id=chat_id, message_id=edit_message_id, reply_markup=ikb_menu)

    return ids, now_id


@dp.callback_query_handler(text_contains='–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç')
async def open_recipe(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç')
                                        ]
                                    ],
                                    )

    rec_id = int(call.data.split('_')[1])
    description: str = cursor.execute("SELECT description FROM recipes WHERE id = ?", (rec_id,)).fetchone()[0]
    text = f"<b><i>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</i></b>\n\n" \
           f"{description}"
    await call.message.answer(text, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ó–∞–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç')
async def close_recipe(call: CallbackQuery):
    await call.message.delete()


# @dp.message_handler(state=Search.enter_title)
# async def start_search(message: types.Message, state: FSMContext):
#     answer = message.text
#     user_id = message.from_user.id
#
#     if len(answer) < 1:
#         await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ - 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:")
#     else:
#         results = cursor.execute("SELECT title FROM recipes").fetchall()
#         titles = [i[0] for i in results if answer.lower().replace('—ë', '–µ') in i[0].lower().replace('—ë', '–µ')]
#         await state.finish()
#
#         if not titles:
#             ikb_menu = InlineKeyboardMarkup(row_width=1,
#                                             inline_keyboard=[
#                                                 [
#                                                     InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞',
#                                                                          callback_data='–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'),
#                                                 ],
#                                                 [
#                                                     InlineKeyboardButton(text='‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞',
#                                                                          callback_data='–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞'),
#                                                 ]
#
#                                             ],
#                                             )
#             await message.answer('üìÇ –ú—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤', reply_markup=ikb_menu)
#         else:
#             # global pages
#             ids = []
#             for title in titles:
#                 rec_ids = cursor.execute("SELECT id FROM recipes WHERE title = ?", (title, )).fetchall()
#                 for i in rec_ids:
#                     ids.append(str(i[0]))
#             # pages[str(message.from_user.id)] = [ids[0], ids]
#             filters = cursor.execute("SELECT filters FROM profiles WHERE id = ?", (user_id,)).fetchone()[0].split()
#
#             ids = filter_recipes(ids, filters[0], filter_type=int(filters[1]))
#             await get_recipe(message, ids, ids[0])
#             # await bot.answer_callback_query(str(call.id))


@dp.callback_query_handler(text_contains='–≤–ø—Ä–∞–≤–æ')
async def next_recipe(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    now_id = call.data.split('_')[2]
    from_subs = int(call.data.split('_')[3])
    from_profile = bool(int(call.data.split('_')[4]))
    if call.data.split('_')[5] == '0' or not call.data.split('_'):
        save_back = []
    else:
        save_back = [call.data.split('_')[5], call.data.split('_')[6]]

    await get_recipe(call, ids, now_id, change=True, call=True, next_rec=True,
                     msg_to_edit=call.message, from_subs=from_subs, from_profile=from_profile, save_back=save_back)


@dp.callback_query_handler(text_contains='–≤–ª–µ–≤–æ')
async def previous_recipe(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    now_id = call.data.split('_')[2]
    from_subs = int(call.data.split('_')[3])
    from_profile = int(call.data.split('_')[4])
    if call.data.split('_')[5] == '0' or not call.data.split('_'):
        save_back = []
    else:
        save_back = [call.data.split('_')[5], call.data.split('_')[6]]

    await get_recipe(call, ids, now_id, change=True, call=True, next_rec=False,
                     msg_to_edit=call.message, from_subs=from_subs, from_profile=from_profile, save_back=save_back)


@dp.callback_query_handler(text_contains='–ª–∞–π–∫')
async def like(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    rec_id = call.data.split('_')[2]
    ind = ids.index(rec_id)
    from_subs = call.data.split('_')[3]

    if call.data.split('_')[4] != '0' and call.data.split('_')[4]:
        save_back = f'_{call.data.split("_")[4]}_{call.data.split("_")[5]}'
    else:
        save_back = '_0'
    print(f'SAVE BACK: {save_back}')

    author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (int(rec_id),)).fetchone()[0]
    if int(author_id) == call.from_user.id:
        await call.answer("–ù–µ–ª—å–∑—è –ª–∞–π–∫–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã!")
    else:

        user_id = call.from_user.id

        likes = cursor.execute("SELECT likes FROM feedback WHERE rec_id = ?", (rec_id,)).fetchone()[0]
        user_likes = cursor.execute("SELECT likes FROM profiles WHERE id = ?", (user_id,)).fetchone()[0].split()
        if not likes:
            likes = []
            count_likes = 0
        else:
            likes = likes.split(' ')
            count_likes = len(likes)

        if str(user_id) in likes:
            likes.remove(str(user_id))
            user_likes.remove(rec_id)
            new_likes = ' '.join(likes)
            user_likes = ' '.join(user_likes)
            count_likes -= 1
        else:
            likes.append(str(user_id))
            user_likes.append(rec_id)
            if len(user_likes) >= 40:
                await give_achievements(user_id, 'üòç')
            give_experience(user_id, 1, rec_id=int(rec_id), for_like=True)
            new_likes = ' '.join(likes)
            user_likes = ' '.join(user_likes)
            count_likes += 1

        cursor.execute("UPDATE feedback SET likes = ? WHERE rec_id = ?", (new_likes, rec_id))
        cursor.execute("UPDATE profiles SET likes = ? WHERE id = ?", (user_likes, user_id))
        connection.commit()

        favorites: str = cursor.execute("SELECT favorites FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
        favorites: list = favorites.split(' ')

        if_favorite = 'üíæ‚úÖ' if str(rec_id) in favorites else 'üíæ'

        like_color = '‚ù§Ô∏è' if str(call.from_user.id) in likes else 'ü§ç'
        first_raw = [
            InlineKeyboardButton(text=f'{like_color} {count_likes if count_likes else ""}',
                                 callback_data=f'–ª–∞–π–∫_{ids_id}_{rec_id}_{from_subs}{save_back}'),
            InlineKeyboardButton(text=f'{if_favorite}',
                                 callback_data=f'–∏–∑–±—Ä–∞–Ω–Ω–æ–µ_{ids_id}_{rec_id}_{from_subs}{save_back}'),
        ]

        author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
        second_raw = []

        if author_id:
            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–∫ –∞–≤—Ç–æ—Ä—É_{author_id}_'
                                                             f'{f"{ids_id}_{rec_id}" if save_back == "_0" else save_back[1:]}_{from_subs}')]
        if len(ids) > 1:
            first_raw += [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'–≤–ª–µ–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}{save_back}'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'–≤–ø—Ä–∞–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}{save_back}'),
            ]
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                                second_raw,
                                                            ],
                                            )
        else:
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        chat_id = call.message.chat.id
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=ikb_menu)
        # await bot.answer_callback_query(str(call.id))


@dp.callback_query_handler(text='–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
async def continue_search(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    await call.message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –±–ª—é–¥–∞ (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è):</i>')
    await Search.enter_title.set()


@dp.callback_query_handler(text_contains='–∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
async def user_favorite(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))
    user_id = call.from_user.id
    favorites: str = cursor.execute("SELECT favorites FROM profiles WHERE id = ?", (user_id,)).fetchone()[0]
    rec_id = call.data.split('_')[2]

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id)

    edit_message = call.message.message_id
    ind = ids.index(rec_id)
    from_subs = call.data.split('_')[3]

    if call.data.split('_')[4] != '0' and call.data.split('_')[4]:
        save_back = f'_{call.data.split("_")[4]}_{call.data.split("_")[5]}'
    else:
        save_back = '_0'

    author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (int(rec_id),)).fetchone()[0]
    if int(author_id) == call.from_user.id:
        await call.answer("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã!")
    else:
        users_favorites: str = cursor.execute("SELECT favorites FROM feedback WHERE rec_id = ?", (rec_id,)).fetchone()[0]
        users_favorites: list = users_favorites.split()

        favorites: list = favorites.split(' ')
        if str(rec_id) not in favorites:
            favorites.append(str(rec_id))
            users_favorites.append(str(user_id))
            give_experience(user_id, 3, rec_id=int(rec_id), for_favor=True)
            await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            favorites.remove(str(rec_id))
            users_favorites.remove(str(user_id))
            await call.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

        users_favorites = ' '.join(users_favorites)

        likes = cursor.execute("SELECT likes FROM feedback WHERE rec_id = ?", (rec_id,)).fetchone()[0]
        likes = likes.split()
        count_likes = len(likes)

        if_favorite = 'üíæ‚úÖ' if str(rec_id) in favorites else 'üíæ'
        like_color = '‚ù§Ô∏è' if str(call.from_user.id) in likes else 'ü§ç'
        first_raw = [
            InlineKeyboardButton(text=f'{like_color} {count_likes if count_likes else ""}',
                                 callback_data=f'–ª–∞–π–∫_{ids_id}_{rec_id}_{from_subs}{save_back}'),
            InlineKeyboardButton(text=f'{if_favorite}',
                                 callback_data=f'–∏–∑–±—Ä–∞–Ω–Ω–æ–µ_{ids_id}_{rec_id}_{from_subs}{save_back}'),
        ]

        author_id = cursor.execute("SELECT author_id FROM recipes WHERE id = ?", (ids[ind],)).fetchone()[0]
        second_raw = []
        if author_id:

            second_raw = [InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞',
                                               callback_data=f'–∫ –∞–≤—Ç–æ—Ä—É_{author_id}_'
                                                             f'{f"{ids_id}_{rec_id}" if save_back == "_0" else save_back[1:]}_{from_subs}')]
        if len(ids) > 1:
            first_raw += [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'–≤–ª–µ–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}{save_back}'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'–≤–ø—Ä–∞–≤–æ_{ids_id}_{rec_id}_{from_subs}_{0}{save_back}'),
            ]
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        else:
            ikb_menu = InlineKeyboardMarkup(row_width=1,
                                            inline_keyboard=[
                                                first_raw,
                                                [
                                                    InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                                                                         callback_data=f'–æ—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç_{rec_id}')
                                                ],
                                                second_raw,
                                            ],
                                            )
        chat_id = call.message.chat.id
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=edit_message, reply_markup=ikb_menu)
        # await bot.answer_callback_query(str(call.id))

        favorites = ' '.join(favorites)

        cursor.execute("UPDATE profiles SET favorites = ? WHERE id = ?", (favorites, user_id))
        cursor.execute("UPDATE feedback SET favorites = ? WHERE rec_id = ?", (users_favorites, rec_id))
        connection.commit()


@dp.callback_query_handler(text='–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞')
async def exit_from_search(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    await call.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞.')


