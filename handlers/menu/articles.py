import asyncio
import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputFile, InputMedia

from loader import dp, connection, cursor, bot, storage
from states import AddComment, Search
from .functions_loader import create_ids_entry, get_ids, get_user_theme_picture
from .vip import check_vip


def get_inline_menu_for_article(article_id: int, user_id: int, photo_id: int = 0,
                                my_art: int = 0, now_list_index: int = None) -> InlineKeyboardMarkup:

    article_likes = cursor.execute("SELECT likes FROM articles WHERE id = ?", (article_id,)).fetchone()[0].split()
    if str(user_id) not in article_likes:
        like_color = 'ü§ç'
    else:
        like_color = '‚ù§Ô∏è'

    comments = cursor.execute("SELECT id FROM comments WHERE article_id = ?", (article_id,)).fetchall()
    comments_amount = 0
    for i in comments:
        comments_amount += 1

    inline_keyboard = [
            InlineKeyboardButton(text=f'{like_color} {len(article_likes) if article_likes else ""}',
                                 callback_data=f'–õ–∞–π–∫_{article_id}_{photo_id}_{my_art}_{now_list_index}'),
            InlineKeyboardButton(text=f'üí¨ {comments_amount}', callback_data=f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_{article_id}'),
        ]

    if photo_id:
        inline_keyboard.append(InlineKeyboardButton(text='‚Ü©Ô∏è', callback_data=f'–ù–∞–∑–∞–¥ –∏–∑ —Å—Ç–∞—Ç—å–∏_'
                                                                             f'{photo_id}_{my_art}_{now_list_index}'))

    ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[inline_keyboard])

    return ikb_menu


def filter_articles(user_id: int, list_of_articles: list, reverse: bool = False):
    user_filter = cursor.execute("SELECT filters FROM profiles WHERE id = ?", (user_id,)).fetchone()[0].split()

    user_articles_ids = []
    other_ids = []

    for i in list_of_articles:
        author_id = cursor.execute("SELECT author_id FROM articles WHERE id = ?", (int(i),)).fetchone()[0]
        if author_id:
            user_articles_ids.append(i)
        else:
            other_ids.append(i)

    if user_filter[0] == '1':
        if user_filter[1] == '0':
            return user_articles_ids + other_ids

        if reverse:
            user_articles_ids.reverse()
            other_ids.reverse()
        return user_articles_ids + other_ids
    else:
        result = []
        amounts = []

        for ids in [user_articles_ids, other_ids]:
            for article_id in ids:
                likes = cursor.execute("SELECT likes FROM articles WHERE id = ?",
                                       (article_id,)).fetchone()[0]
                likes_amount = len(likes.split())

                comments = cursor.execute("SELECT id FROM comments WHERE article_id = ?",
                                          (article_id,)).fetchall()
                comments_amount = len(comments)

                amount = likes_amount + comments_amount
                amounts.append(amount)
                if user_filter[1] == '0':
                    amounts.sort()
                else:
                    amounts.sort(reverse=True)

            sorted_ids = []

            for a in amounts:
                for article_id in ids:
                    likes = cursor.execute("SELECT likes FROM articles WHERE id = ?",
                                           (article_id,)).fetchone()[0]
                    likes_amount = len(likes.split())

                    comments = cursor.execute("SELECT id FROM comments WHERE article_id = ?",
                                              (article_id,)).fetchall()
                    comments_amount = len(comments)
                    amount = likes_amount + comments_amount

                    if a == amount:
                        sorted_ids.append(article_id)

            new_sorted_ids = []
            for i in sorted_ids:
                if i not in new_sorted_ids:
                    new_sorted_ids.append(i)

            result += new_sorted_ids

        print(result)
        return result


def to_list_of_lists(lst: list, user_id: int, reverse: bool = False) -> list:
    lst = filter_articles(user_id, lst, reverse=reverse)

    ids = [[]]
    c = 0
    for i in lst:
        ids[c].append(i)
        if len(ids[c]) == 6:
            ids.append([])
            c += 1
    return ids


def get_inline_keyboard_menu(ids: list, now_list_index: int, my_art: int = 0) -> InlineKeyboardMarkup:

    inline_keyboard = []

    for i in ids[now_list_index]:
        title = cursor.execute("SELECT title FROM articles WHERE id = ?", (i,)).fetchone()[0]
        button = InlineKeyboardButton(text=title if len(title) <= 30 else f'{title[:30]}...',
                                      callback_data=f'—Å—Ç–∞—Ç—å—è_{i}_{my_art}_{now_list_index}')
        inline_keyboard.append([button])

    button_back = InlineKeyboardButton(text='‚Ü©Ô∏è', callback_data='—Å—Ç–∞—Ç—å–∏')
    if len(ids) >= 2:
        full_ids = []
        for i in ids:
            for j in i:
                full_ids.append(str(j))

        str_ids = ' '.join(full_ids)
        if not cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)", (str_ids, 'articles')).fetchone():
            ids_id = create_ids_entry(full_ids, 'articles')
        else:
            ids_id = cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)",
                                    (str_ids, 'articles')).fetchone()[0]

        button_next = InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'—Å–ª–µ–¥-—Å–ø–∏—Å–æ–∫_{ids_id}_{now_list_index}')
        button_prev = InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'–ø—Ä–µ–¥-—Å–ø–∏—Å–æ–∫_{ids_id}_{now_list_index}')

        if ids[now_list_index] == ids[-1]:
            inline_keyboard.append([button_back, button_prev])
        elif now_list_index == 0:
            inline_keyboard.append([button_back, button_next])
        else:
            inline_keyboard.append([button_back, button_prev, button_next])
    else:
        inline_keyboard.append([button_back])

    ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=inline_keyboard)
    return ikb_menu


def get_comment(user_id: int, article_id: int, comments_list: list, now_index: int):

    comment_id = comments_list[now_index]

    str_comments_list = ' '.join(str(i) for i in comments_list)

    if not cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)", (str_comments_list,
                                                                                 'comments')).fetchone():
        ids_id = create_ids_entry(comments_list, 'comments')
    else:
        ids_id = cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)",
                                (str_comments_list, 'comments')).fetchone()[0]

    comment_text = cursor.execute("SELECT text FROM comments WHERE id = ?", (comment_id,)).fetchone()[0]
    author_id = cursor.execute("SELECT author_id FROM comments WHERE id = ?", (comment_id,)).fetchone()[0]
    author_name = cursor.execute("SELECT name FROM profiles WHERE id = ?", (author_id,)).fetchone()[0]
    emoji = cursor.execute("SELECT emoji FROM profiles WHERE id = ?", (author_id,)).fetchone()[0]

    comment = f'<b>{emoji} {author_name} {emoji}</b> {"<i>(–í—ã)</i>" if user_id == author_id else ""}\n\n' \
              f'{comment_text}'

    first_row = [
        InlineKeyboardButton(text='‚Ü©Ô∏è', callback_data=f'–ù–∞–∑–∞–¥ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'),
        InlineKeyboardButton(text='üí¨‚ûï', callback_data=f'–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_{article_id}'),

                ]
    second_row = []

    if user_id == author_id:
        first_row.append(InlineKeyboardButton(text='üóë‚ùå', callback_data=f'–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_{comment_id}'),)

    if len(comments_list) > 1:

        second_row.append(InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                               callback_data=
                                               f'–ü—Ä–µ–¥-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_{ids_id}_{now_index}_{article_id}'))
        second_row.append(InlineKeyboardButton(text='‚û°Ô∏è',
                                               callback_data=
                                               f'–°–ª–µ–¥-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_{ids_id}_{now_index}_{article_id}'))

    ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[first_row, second_row])

    return comment, ikb_menu


@dp.callback_query_handler(text='—Å—Ç–∞—Ç—å–∏')
async def to_articles(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))
    user_id = call.from_user.id

    image = get_user_theme_picture(user_id, 'articles')
    ikb_menu = InlineKeyboardMarkup(row_width=1,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='üìí –ß–∏—Ç–∞—Ç—å\n—Å—Ç–∞—Ç—å–∏',
                                                                 callback_data=f'—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å–∏'),
                                            InlineKeyboardButton(text='üìï –ú–æ–∏\n—Å—Ç–∞—Ç—å–∏',
                                                                 callback_data='–º–æ–∏ —Å—Ç–∞—Ç—å–∏'),

                                        ],
                                        [
                                            InlineKeyboardButton(text='üñã –ù–∞–ø–∏—Å–∞—Ç—å\n—Å—Ç–∞—Ç—å—é',
                                                                 callback_data='–Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é'),
                                            InlineKeyboardButton(text='üìò –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫', callback_data='—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')
                                        ],
                                        [
                                            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='–ø—Ä–æ—á–µ–µ'),
                                        ]
                                    ],
                                    )
    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    media = InputMedia(media=image)
    await bot.edit_message_media(media=media, chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text='—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å–∏')
async def read_articles(call: CallbackQuery):
    user_id = call.from_user.id

    if not check_vip(user_id):
        await bot.answer_callback_query(str(call.id), text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!',
                                        show_alert=True)
    else:
        await bot.answer_callback_query(str(call.id))

        user_id = call.from_user.id

        articles = cursor.execute("SELECT id FROM articles").fetchall()
        list_of_articles = []
        for a in articles:
            list_of_articles.append(a[0])

        ids = to_list_of_lists(list_of_articles, user_id, reverse=True)

        ikb_menu = get_inline_keyboard_menu(ids, 0, )

        message_to_edit = call.message.message_id
        chat_id = call.message.chat.id
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='—Å–ª–µ–¥-—Å–ø–∏—Å–æ–∫')
async def next_list_of_articles(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    now_index = int(call.data.split('_')[2]) + 1

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id, 'articles')

    ids = [int(i) for i in ids]
    ids = to_list_of_lists(ids, user_id)

    ikb_menu = get_inline_keyboard_menu(ids, now_index)

    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ø—Ä–µ–¥-—Å–ø–∏—Å–æ–∫')
async def prev_list_of_articles(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    now_index = int(call.data.split('_')[2]) - 1

    ids_id = int(call.data.split('_')[1])
    ids = get_ids(ids_id, 'articles')

    ids = [int(i) for i in ids]
    ids = to_list_of_lists(ids, user_id)

    ikb_menu = get_inline_keyboard_menu(ids, now_index)

    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='—Å—Ç–∞—Ç—å—è_')
async def show_article(call: CallbackQuery):
    user_id = call.from_user.id
    article_id = int(call.data.split('_')[1])
    now_list_index = int(call.data.split('_')[3])

    author_id = cursor.execute("SELECT author_id FROM articles WHERE id = ?", (article_id,)).fetchone()[0]

    if not check_vip(user_id) and author_id != user_id:
        await bot.answer_callback_query(str(call.id), text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!',
                                        show_alert=True)
    else:
        await bot.answer_callback_query(str(call.id))

        my_art = int(call.data.split('_')[2])

        title = cursor.execute("SELECT title FROM articles WHERE id = ?", (article_id,)).fetchone()[0]
        description = cursor.execute("SELECT description FROM articles WHERE id = ?", (article_id,)).fetchone()[0]
        image = InputFile(os.path.join(f'images/articles/{article_id}.jpg'))

        chat_id = call.message.chat.id
        photo_id = await bot.send_photo(chat_id=chat_id, photo=image)
        photo_id = photo_id.message_id

        ikb_menu = get_inline_menu_for_article(article_id, user_id, photo_id=photo_id, my_art=my_art,
                                               now_list_index=now_list_index)

        if not author_id:
            author = ''
        elif author_id == user_id:
            author = '<i>–≠—Ç–æ –≤–∞—à–∞ —Å—Ç–∞—Ç—å—è!</i>'
        else:
            author = cursor.execute("SELECT name FROM profiles WHERE id = ?", (author_id,)).fetchone()[0]
            author = f'<i>–ê–≤—Ç–æ—Ä: <code>{author}</code></i>'

        article = f'<b>{title}</b>\n\n' \
                  f'{description}\n\n' \
                  f'{author}'

        await call.message.delete()
        await call.message.answer(article, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–õ–∞–π–∫')
async def like_article(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id
    article_id = int(call.data.split('_')[1])
    photo_id = int(call.data.split('_')[2])
    my_art = int(call.data.split('_')[3])
    now_list_index = int(call.data.split('_')[4])

    article_likes: list = cursor.execute("SELECT likes FROM articles WHERE id = ?", (article_id,)).fetchone()[0].split()
    if str(user_id) in article_likes:
        article_likes.remove(str(user_id))
    else:
        article_likes.append(str(user_id))

    cursor.execute("UPDATE articles SET likes = ? WHERE id = ?", (' '.join(article_likes), article_id))
    connection.commit()

    ikb_menu = get_inline_menu_for_article(article_id, user_id, photo_id=photo_id, my_art=my_art,
                                           now_list_index=now_list_index)

    chat_id = call.message.chat.id
    message_id = call.message.message_id

    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
async def to_comments(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    article_id = int(call.data.split('_')[1])
    user_id = call.from_user.id

    comments = cursor.execute("SELECT id FROM comments WHERE article_id = ?", (article_id,)).fetchall()

    article_comments = []
    for i in comments:
        article_comments.append(i[0])

    if article_comments:
        comment, ikb_menu = get_comment(user_id, article_id, article_comments, 0)
        await call.message.answer(comment, reply_markup=ikb_menu)
    else:
        ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=
            [
                [
                    InlineKeyboardButton(text='üí¨‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_{article_id}'),
                    InlineKeyboardButton(text='‚ùå –í—ã–π—Ç–∏', callback_data=f'–ù–∞–∑–∞–¥ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
                ]
            ]
                                        )
        await call.message.answer('–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!', reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–°–ª–µ–¥-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
async def next_comment(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    ids_id = int(call.data.split('_')[1])
    comments_list = get_ids(ids_id, ids_type='comments')

    now_index = int(call.data.split('_')[2]) + 1
    article_id = int(call.data.split('_')[3])

    if now_index >= len(comments_list):
        now_index = 0

    comment, ikb_menu = get_comment(user_id, article_id, comments_list, now_index)
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=comment, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ü—Ä–µ–¥-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
async def prev_comment(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    ids_id = int(call.data.split('_')[1])
    comments_list = get_ids(ids_id, ids_type='comments')

    now_index = int(call.data.split('_')[2]) - 1
    article_id = int(call.data.split('_')[3])

    if now_index < -(len(comments_list)):
        now_index = len(comments_list) - 1

    comment, ikb_menu = get_comment(user_id, article_id, comments_list, now_index)
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=comment, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
async def add_comment(call: CallbackQuery):
    user_id = call.from_user.id
    article_id = int(call.data.split('_')[1])

    chat_id = call.message.chat.id

    state = FSMContext(storage=storage, chat=chat_id, user=user_id)

    await state.update_data(article_id=article_id)
    await bot.answer_callback_query(str(call.id), text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):',
                                    show_alert=True)
    await AddComment.enter_comment_text.set()
    await call.message.delete()


@dp.message_handler(state=AddComment.enter_comment_text)
async def enter_comment(message: types.Message, state: FSMContext):
    answer = message.text
    user_id = message.from_user.id

    if len(answer) > 350:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. (–ú–∞–∫—Å–∏–º—É–º 350 —Å–∏–º–≤–æ–ª–æ–≤)")
    else:
        last_id = 1
        ids = cursor.execute("SELECT id FROM comments").fetchall()
        if ids:
            last_id = ids[-1][0]

        data = await state.get_data()
        article_id = data.get('article_id')

        cursor.execute("INSERT INTO comments VALUES (?, ?, ?, ?)", (last_id + 1, article_id, user_id, answer))
        connection.commit()

        await state.finish()
        await message.delete()
        msg = await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        await asyncio.sleep(1)
        await msg.delete()


@dp.callback_query_handler(text_contains='–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
async def delete_comment(call: CallbackQuery):
    comment_id = int(call.data.split('_')[1])

    cursor.execute("DELETE FROM comments WHERE id = ?", (comment_id,))
    connection.commit()

    await bot.answer_callback_query(str(call.id), text="–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()


@dp.callback_query_handler(text='–ù–∞–∑–∞–¥ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
async def back_from_comments(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    await call.message.delete()


@dp.callback_query_handler(text_contains='–ù–∞–∑–∞–¥ –∏–∑ —Å—Ç–∞—Ç—å–∏')
async def back_from_article(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    photo_id = int(call.data.split('_')[1])
    my_art = int(call.data.split('_')[2])
    now_list_index = int(call.data.split('_')[3])

    image = get_user_theme_picture(user_id, 'articles')

    if not my_art:
        articles = cursor.execute("SELECT id FROM articles").fetchall()
        list_of_articles = []
        for a in articles:
            list_of_articles.append(a[0])
    else:
        user_articles = cursor.execute("SELECT id FROM articles WHERE author_id = ?", (user_id,)).fetchall()

        list_of_articles = [i[0] for i in user_articles]

    ids = to_list_of_lists(list_of_articles, user_id)

    ikb_menu = get_inline_keyboard_menu(ids, now_list_index, my_art)

    chat_id = call.message.chat.id
    media = InputMedia(media=image)
    await call.message.delete()
    await bot.edit_message_media(chat_id=chat_id, media=media, message_id=photo_id, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–º–æ–∏ —Å—Ç–∞—Ç—å–∏')
async def my_articles(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id
    user_articles = cursor.execute("SELECT id FROM articles WHERE author_id = ?", (user_id,)).fetchall()

    user_articles = [i[0] for i in user_articles]

    # image = InputFile(os.path.join('images/design/articles.jpg'))
    ids = to_list_of_lists(user_articles, user_id, reverse=True)

    ikb_menu = get_inline_keyboard_menu(ids, 0, my_art=1)

    message_to_edit = call.message.message_id
    chat_id = call.message.chat.id
    # media = InputMedia(media=image)
    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_to_edit, reply_markup=ikb_menu)


def get_guide_inline_menu(guides_list: list, now_id: int):

    str_guides = ' '.join([str(i) for i in guides_list])
    if not cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)", (str_guides, 'guides')).fetchone():
        ids_id = create_ids_entry(guides_list, 'guides')
    else:
        ids_id = cursor.execute("SELECT id FROM user_ids WHERE (ids, type) = (?, ?)",
                                (str_guides, 'guides')).fetchone()[0]

    if len(guides_list) > 1:
        ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'–ì–∞–π–¥_–ø—Ä–µ–¥_{ids_id}_{now_id}'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'–ì–∞–π–¥_—Å–ª–µ–¥_{ids_id}_{now_id}')
            ],
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫'),
            ]
        ])
    else:
        ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫'),
            ]
        ])

    return ikb_menu


@dp.callback_query_handler(text='—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')
async def handbook(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))
    user_id = call.from_user.id

    image = get_user_theme_picture(user_id, 'handbook')

    ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [
            InlineKeyboardButton(text='üî§ –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É', callback_data='–≥–∞–π–¥—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É'),
            InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫', callback_data='–ø–æ–∏—Å–∫ –≥–∞–π–¥–æ–≤')
        ],
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='—Å—Ç–∞—Ç—å–∏'),
        ]
    ])

    chat_id = call.message.chat.id
    message_id = call.message.message_id
    media = InputMedia(media=image)

    await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–≥–∞–π–¥—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É')
async def alphabetically(call: CallbackQuery):
    user_id = call.from_user.id

    if not check_vip(user_id):
        await bot.answer_callback_query(str(call.id), text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!',
                                        show_alert=True)
    else:
        await bot.answer_callback_query(str(call.id))

        all_titles = cursor.execute("SELECT title FROM handbook").fetchall()
        all_titles = [i[0] for i in all_titles]

        sorted_titles = sorted(all_titles)
        sorted_ids = []
        for t in sorted_titles:
            g_id = cursor.execute("SELECT id FROM handbook WHERE title = ?", (t,)).fetchone()[0]
            sorted_ids.append(g_id)

        ikb_menu = get_guide_inline_menu(sorted_ids, sorted_ids[0])

        photo = InputFile(os.path.join(f'images/guides/{sorted_ids[0]}-handbook.jpg'))
        media = InputMedia(media=photo)
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='–ì–∞–π–¥')
async def alphabetically(call: CallbackQuery):
    user_id = call.from_user.id

    if not check_vip(user_id):
        await bot.answer_callback_query(str(call.id), text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!',
                                        show_alert=True)
    else:
        await bot.answer_callback_query(str(call.id))

        if_next = True if call.data.split('_')[1] == '—Å–ª–µ–¥' else False

        ids_id = int(call.data.split('_')[2])
        guides_list = get_ids(ids_id, ids_type='guides')

        guides_list = [int(i) for i in guides_list]
        now_id = int(call.data.split('_')[3])

        now_id_index = guides_list.index(now_id)
        if if_next:
            if now_id == guides_list[-1]:
                now_id = guides_list[0]
            else:
                now_id = guides_list[now_id_index + 1]
        else:
            if now_id == guides_list[0]:
                now_id = guides_list[len(guides_list) - 1]
            else:
                now_id = guides_list[now_id_index - 1]

        ikb_menu = get_guide_inline_menu(guides_list, now_id)

        photo = InputFile(os.path.join(f'images/guides/{now_id}-handbook.jpg'))
        media = InputMedia(media=photo)

        chat_id = call.message.chat.id
        message_id = call.message.message_id

        await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–ø–æ–∏—Å–∫ –≥–∞–π–¥–æ–≤')
async def search_guides(call: CallbackQuery):
    user_id = call.from_user.id

    if not check_vip(user_id):
        await bot.answer_callback_query(str(call.id), text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!',
                                        show_alert=True)
    else:
        await bot.answer_callback_query(str(call.id))

        state = FSMContext(storage, chat=call.message.chat.id, user=call.from_user.id)

        await Search.guide_ingredient.set()
        message_to_delete = await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è) –Ω—É–∂–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "
                                                      "(—É—á–∏—Ç—ã—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–æ"
                                                      " –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ: <i>—Å–ª–∏–≤—ã, –ø–µ—Ä—Å–∏–∫–∏ –∏ —Ç.–¥.</i>):")
        await state.update_data(message_to_delete=message_to_delete.message_id)
        await state.update_data(message_to_edit=call.message.message_id)


@dp.message_handler(state=Search.guide_ingredient)
async def enter_ingredient(message: types.Message, state: FSMContext):
    answer = message.text.lower()
    user_id = message.from_user.id

    if not check_vip(user_id):
        await message.answer('–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!')
        await state.finish()
    else:
        data = await state.get_data()
        message_to_delete = data.get('message_to_delete')
        message_to_edit = data.get('message_to_edit')

        await message.delete()
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete)
        except Exception as e:
            print(e)

        if len(answer) < 3:
            ikb_menu = InlineKeyboardMarkup(row_width=1)
            close_button = InlineKeyboardButton(text='‚ùå –í—ã–π—Ç–∏', callback_data='–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤')
            ikb_menu.add(close_button)

            message_to_delete = await message.answer("–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=ikb_menu)
            await state.update_data(message_to_delete=message_to_delete.message_id)
        else:
            all_titles = cursor.execute("SELECT title FROM handbook").fetchall()
            all_titles = [i[0] for i in all_titles]

            result = []
            for title in all_titles:
                if answer in title:
                    g_id = cursor.execute("SELECT id FROM handbook WHERE title = ?", (title,)).fetchone()[0]
                    result.append(g_id)

            if not result:
                ikb_menu = InlineKeyboardMarkup(row_width=1)
                close_button = InlineKeyboardButton(text='‚ùå –í—ã–π—Ç–∏', callback_data='–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤')
                ikb_menu.add(close_button)

                message_to_delete = await message.answer("–ù–µ –Ω–∞—à–ª–æ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É! "
                                                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                                                         reply_markup=ikb_menu)
                await state.update_data(message_to_delete=message_to_delete.message_id)
            else:
                ikb_menu = get_guide_inline_menu(result, result[0])

                photo = InputFile(os.path.join(f'images/guides/{result[0]}-handbook.jpg'))
                media = InputMedia(media=photo)

                chat_id = message.chat.id
                message_id = message_to_edit

                await state.finish()
                await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media, reply_markup=ikb_menu)


@dp.callback_query_handler(text='–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤', state=Search.guide_ingredient)
async def exit_from_search_guides(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id), text='‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')

    await call.message.delete()
    await state.finish()
