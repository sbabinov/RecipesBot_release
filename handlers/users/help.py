import os

from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import types

from loader import dp, bot, cursor, connection, storage
from handlers.menu.functions_loader import get_user_theme_picture
from states import Help
from data.config import admins


@dp.message_handler(text="/help")
async def command_help(message: types.Message):
    user_id = message.from_user.id

    image = get_user_theme_picture(user_id, 'help')

    ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [
            InlineKeyboardButton(text='‚ùì –í–æ–ø—Ä–æ—Å', callback_data='—Ä–µ–ø–æ—Ä—Ç_–≤–æ–ø—Ä–æ—Å'),
            InlineKeyboardButton(text='‚úèÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='—Ä–µ–ø–æ—Ä—Ç_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'),
        ],
        [
            InlineKeyboardButton(text='üîä –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –±–æ—Ç–∞', callback_data='—Ä–µ–ø–æ—Ä—Ç_–ø—Ä–æ–±–ª–µ–º–∞'),
        ]
    ])

    chat_id = message.chat.id

    await bot.send_photo(chat_id=chat_id, photo=image, reply_markup=ikb_menu)


@dp.callback_query_handler(text_contains='—Ä–µ–ø–æ—Ä—Ç')
async def ask_question(call: CallbackQuery):
    await bot.answer_callback_query(str(call.id))

    report_type = call.data.split('_')[1]

    if report_type == '–≤–æ–ø—Ä–æ—Å':
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    if report_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞:")
    if report_type == '–ø—Ä–æ–±–ª–µ–º–∞':
        await call.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:")

    state = FSMContext(storage, call.message.chat.id, call.from_user.id)

    await state.update_data(report_type=report_type)
    await Help.question_text.set()


@dp.message_handler(state=Help.question_text)
async def enter_question_text(message: types.Message, state: FSMContext):
    answer = message.text

    data = await state.get_data()
    report_type = data.get('report_type')

    if report_type == '–≤–æ–ø—Ä–æ—Å' and len(answer) > 1000:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    if (report_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' or report_type == '–ø—Ä–æ–±–ª–µ–º–∞') and (len(answer) > 1800):
        await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 1800 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    else:
        ikb_menu = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [
                InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='–æ—Å—Ç–∞–≤–∏—Ç—å'),
                InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='–Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å'),
            ]
        ])

        await state.update_data(question_text=answer)

        await Help.confirm.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=ikb_menu)


@dp.callback_query_handler(text='–æ—Å—Ç–∞–≤–∏—Ç—å', state=Help.confirm)
async def confirm_question(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id))

    user_id = call.from_user.id

    data = await state.get_data()
    question_text = data.get('question_text')
    report_type = data.get('report_type')

    last_id = cursor.execute("SELECT id FROM help").fetchall()
    if last_id:
        last_id = last_id[-1][0]
    else:
        last_id = 0

    question_id = last_id + 1

    if report_type == '–≤–æ–ø—Ä–æ—Å':
        db_report_type = 'question'
    elif report_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':
        db_report_type = 'suggestion'
    else:
        db_report_type = 'problem'

    cursor.execute("INSERT INTO help VALUES (?, ?, ?, ?)", (question_id, user_id, question_text, db_report_type))
    connection.commit()

    try:
        await bot.send_message(chat_id=admins[0], text='–ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
    except Exception as e:
        print(e)

    await state.finish()

    if report_type == '–≤–æ–ø—Ä–æ—Å':
        await call.message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!")
    elif report_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':
        await call.message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!")
    else:
        await call.message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!")


@dp.callback_query_handler(text='–Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å', state=Help.confirm)
async def not_confirm_question(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(str(call.id))

    await state.finish()
    await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

